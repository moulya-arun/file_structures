package fs;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;
import java.util.StringTokenizer;

public class primary {
	
	Scanner scanner = new Scanner(System.in);

	private dem1[] sI = new dem1[100000];
	
    private String prikey,place,name,phno,gender,age;
	int reccount = 0;
    int reccount1=0;
public void getData(){
    		@SuppressWarnings("resource")
    		Scanner scanner = new Scanner(System.in);

		System.out.println("Enter the primary key: ");
		prikey = scanner.next();
		System.out.println("Enter the place: ");
		 place = scanner.next();
		System.out.println("Enter the name: ");
		name = scanner.next();
		System.out.println("Enter the phno: ");
		phno = scanner.next();
		System.out.println("Enter the gender: ");
		gender = scanner.next();
		System.out.println("Enter the age: ");
		age = scanner.next();
		System.out.println("WAITING...");
}

public void add(){
        String data= prikey +","+  place +","+ name +","+ phno +","+ gender +"," + age ;

 try{			
			RandomAccessFile recordfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
			recordfile.seek(recordfile.length());
			long pos = recordfile.getFilePointer();
			recordfile.writeBytes(data+"\n");
			recordfile.close();
			
			RandomAccessFile indexfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\in.txt","rw");
			indexfile.seek(indexfile.length());
			indexfile.writeBytes(prikey+","+pos+"\n");
			indexfile.close();
			
			RandomAccessFile indexfile1 = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\in1.txt","rw");
			indexfile1.seek(indexfile1.length());
			indexfile1.writeBytes(place+","+pos+"\n");
			indexfile1.close();
		}
		catch(IOException e){
			System.out.println(e);
		}
	}                     
   
public void priIndex(){

	String line,prikey = null,pos = null;
	int count = 0;
	int sIIndex = 0;
	reccount=0;
	RandomAccessFile indexfile;
	try {
		indexfile = new RandomAccessFile("C:\\Users\\Moulya\\Desktop\\in.txt","rw");

		try {
			
			while((line = indexfile.readLine())!= null){
                    if(line.contains("*")) {
                		continue;
                	}
				count = 0;
				StringTokenizer st = new StringTokenizer(line,",");
				while (st.hasMoreTokens()){
				 count+=1;
				 if(count==1)
			    prikey = st.nextToken();
				 pos = st.nextToken();                 
			    }
				sI[sIIndex] = new dem1();
				sI[sIIndex].setRecPos(pos);
				sI[sIIndex].setprikey(prikey);
				reccount++;
				sIIndex++;
									if(sIIndex==100000)
                                    {
										break;
                                    }
                            }
		} catch (IOException e) {
			
			e.printStackTrace();
			return;
		}
	} catch (FileNotFoundException e) {
		
		e.printStackTrace();
		return;
	} 
	
	System.out.println("Total records" + reccount+"\n");
	if (reccount==1) { return;}
	sortIndex();
}
public void sortIndex() {
	dem1 temp = new dem1();
	
	for(int i=0; i<reccount; i++)
	    {	
			for(int j=i+1; j<reccount; j++) {
				if(sI[i].getprikey().compareTo(sI[j].getprikey())  > 0)
	            {
	                temp.setprikey(sI[i].getprikey()); 
			        temp.setRecPos(sI[i].getRecPos());
			
		        	sI[i].setprikey(sI[j].getprikey());
		        	sI[i].setRecPos(sI[j].getRecPos());
			
		        	sI[j].setprikey(temp.getprikey());
		        	sI[j].setRecPos(temp.getRecPos());
	            }
			}
	    }	
	}

public void search(){
	Scanner scanner = new Scanner(System.in);

    System.out.println("Enter the primary key to search: ");
			String prikey = scanner.next();
			System.out.println(reccount);
			int pos = binarySearch(sI, 0, reccount-1, prikey);
                                
			if (pos == -1) {
				System.out.println("Record not found in the record file");
				return ;
			}
			
			RandomAccessFile recordfile;
			try {
				recordfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
				try {
					recordfile.seek(Long.parseLong(sI[pos].getRecPos()));
					String record = recordfile.readLine();
					StringTokenizer st = new StringTokenizer(record,",");
					
					int count = 0;
                                                
               	    while (st.hasMoreTokens()){
                		     count+=1;
                  	    	 if(count==1){
                  	    	 String tmp_prikey = st.nextToken();
                                         if(tmp_prikey.contains("*"))
                                         {
                                             System.out.println("it has been deleted");
                                             break;
                                         }
				System.out.println("prikey: "+tmp_prikey);
                  	         this.prikey = tmp_prikey;
                  	    	
                  	          String tmp_place = st.nextToken();
                     	      System.out.println("place: "+tmp_place);
                     	      this.place = tmp_place;
                     	       
                     	       String tmp_year = st.nextToken();
                     	       System.out.println("name: "+tmp_year);
                     	       this.name = tmp_year;
                  	    	 
                     	        String tmp_commodity = st.nextToken();
                     	        System.out.println("phno: "+tmp_commodity);
                     	        this.phno = tmp_commodity;
                     	      
                     	        String tmp_trade = st.nextToken();
                     	        System.out.println("gender: "+tmp_trade);
                     	        this.gender = tmp_trade;
                  	    	 	System.out.println();
                  	    	 	
                  	    	 	String tmp_flow = st.nextToken();
                     	        System.out.println("age: "+tmp_flow);
                     	        this.age = tmp_flow;
                  	    }
                  	    	 else
                  	    		 break;
                       }
                } 
					catch (NumberFormatException e) {
					
					e.printStackTrace();
				} 
				catch (IOException e) {
					
					e.printStackTrace();
				}
		}
				catch (FileNotFoundException e) {
				
				e.printStackTrace();
			}
}
int binarySearch(dem1 s[], int l, int r, String prikey) {
	
	int mid;
	while (l<=r) {
        
		mid = (l+r)/2;
		if(s[mid].getprikey().compareTo(prikey)==0) {return mid;}
		if(s[mid].getprikey().compareTo(prikey)<0) l = mid + 1;
		if(s[mid].getprikey().compareTo(prikey)>0) r = mid - 1;
	}
	return -1;
}
public  void indexing() 
{
       try{
      RandomAccessFile hey=new RandomAccessFile("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
      RandomAccessFile indexfile=new RandomAccessFile("C:\\Users\\Moulya\\Desktop\\in.txt","rw");
      String line;
      long pos=hey.getFilePointer();
      while((line = hey.readLine())!=null)
      {
          if(line.contains("*")) {
	                		continue;
	                	}

          String[] columns=line.split(",");
          indexfile.writeBytes(columns[0]+","+pos+"\n");
          pos=hey.getFilePointer();
      } indexfile.close();
      hey.close();
       }
  
  catch(IOException e)
  {
      System.out.println(e);
  }
}

public void delete() throws IOException {
    System.out.println("Enter the primary key to delete record ");
				String prikey = scanner.next();
   int pos = binarySearch(sI, 0, reccount-1, prikey);
   System.out.println("WAIT FOR FEW SECONDS....: ");	
				if (pos == -1) {
					System.out.println("Record not found in the record file");
					return ;
				}
             
				RandomAccessFile recordfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
					try {
						recordfile.seek(Long.parseLong(sI[pos].getRecPos()));
                                        recordfile.writeBytes("*");
                                        recordfile.close();
                         }    
                                                       
                    catch (NumberFormatException e) {
						
						e.printStackTrace();
					} 
					catch (IOException e) {
						
						e.printStackTrace();
					}
			}
}
