package fs;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;
import java.util.StringTokenizer;
public class secondary {

			private dem2[] sI = new dem2[100000];
				
			    private String id,place,name,phno,age,gender;
				int reccount = 0;

			public void getData(){
			    		@SuppressWarnings("resource")
					Scanner scanner = new Scanner(System.in);
					System.out.println("Enter the id: ");
					id = scanner.next();
					System.out.println("Enter the place: ");
					 place = scanner.next();
					System.out.println("Enter the name: ");
					name = scanner.next();
					System.out.println("Enter the phno: ");
					phno = scanner.next();
					System.out.println("Enter the gender: ");
					gender = scanner.next();
					System.out.println("Enter the age: ");
					age = scanner.next();
					System.out.println("WAITING");
			}
			public void add(){
			        String data=id +","+  place +","+ name +","+ phno +","+ gender+ "," +age ;

			 try{			
						RandomAccessFile recordfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
						recordfile.seek(recordfile.length());
						long pos = recordfile.getFilePointer();
						recordfile.writeBytes(data+"\n");
						recordfile.close();
						
						RandomAccessFile indexfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\in1.txt","rw");
						indexfile.seek(indexfile.length());
						indexfile.writeBytes(id+","+pos+"\n");
						indexfile.close();
					}
					catch(IOException e){
						System.out.println(e);
					}
				}                     

			public void priIndex(){

					String line ,seckey = null,pos = null;
					int count = 0;
					int sIIndex = 0;
					reccount=0;
					RandomAccessFile indexfile;
					try {
						indexfile = new RandomAccessFile("C:\\Users\\Moulya\\Desktop\\in1.txt","rw");

						try {
							
							while((line = indexfile.readLine())!= null){
			                                     if(line.contains("*")) {
				                		continue;
				                	}
								count = 0;
			                                                 
			                    StringTokenizer st = new StringTokenizer(line,",");
								while (st.hasMoreTokens()){
								 count+=1;
								 if(count==1)
							    seckey = st.nextToken();
								 pos = st.nextToken();
			                                         
							    }
								sI[sIIndex] = new dem2();
								sI[sIIndex].setRecPos(pos);
								sI[sIIndex].setseckey(seckey);
								reccount++;
								sIIndex++;
			                                        if(sIIndex==100000)
			                                        {
			                                            break;
			                                        }
			                                     
			                                }
						} catch (IOException e) {
							
							e.printStackTrace();
							return;
						}
					} catch (FileNotFoundException e) {
						
						e.printStackTrace();
						return;
					} 
					
					System.out.println("total records" + reccount);
					 System.out.println("WAITING....");
					if (reccount==1) { return;}
					sortIndex();
				}
				
				
				public void sortIndex() {
					dem2 temp = new dem2();
					
					for(int i=0; i<reccount; i++)
					    {	
							for(int j=i+1; j<reccount; j++) {
								if(sI[i].getseckey().compareTo(sI[j].getseckey())  > 0)
					            {
					                temp.setseckey(sI[i].getseckey()); 
							        temp.setRecPos(sI[i].getRecPos());
							
						        	sI[i].setseckey(sI[j].getseckey());
						        	sI[i].setRecPos(sI[j].getRecPos());
							
						        	sI[j].setseckey(temp.getseckey());
						        	sI[j].setRecPos(temp.getRecPos());
					            }
							}
								
						}	
					
				}
			        public void search(){
			        	 System.out.println("Enter the place to search: ");
			             Scanner scanner = new Scanner(System.in);
			             String place = scanner.next();
			             
			             
			             int oripos = binarySearch(sI, 0, reccount-1, place);
			             
			             if (oripos == -1) {
			                 System.out.println("Record not found in the record file");
			                 return ;
			             }
			             
			             int pos = oripos;
			             
			             do {
			                 readFile(pos);
			                 pos--;
			                 if (pos < 0) { break;}
			             }while(sI[pos].getseckey().compareTo(place)==0);
			             
			             pos = oripos + 1 ;
			             
			             while(sI[pos].getseckey().compareTo(place)==0 && pos > reccount-1) {
			                 readFile(pos);
			                 pos++;
			             }
			        }
			 public void readFile(int pos) {
			            
			            RandomAccessFile recordfile;
			            try {
			                recordfile = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
			                try {
			                    recordfile.seek(Long.parseLong(sI[pos].getRecPos()));
			                    String record = recordfile.readLine();
			                    StringTokenizer st = new StringTokenizer(record,",");
			                    
			                    int count = 0;
			                       
			                    while (st.hasMoreTokens()){
			                             count += 1;
			                               if(count==1){
			                               String tmp_prikey = st.nextToken();
			                               System.out.println("prikey: "+tmp_prikey);
			                               this.place = tmp_prikey;
			                              
			                                String tmp_place = st.nextToken();
			                               System.out.println("place: "+tmp_place);
			                               this.id = tmp_place;
			                                
			                                String tmp_name = st.nextToken();
			                                System.out.println("name: "+tmp_name);
			                                this.name = tmp_name;
			                               
			                                 String tmp_phno = st.nextToken();
			                                 System.out.println("phno: "+tmp_phno);
			                                 this.phno = tmp_phno;
			                              
			                                 String tmp_gender = st.nextToken();
			                                 System.out.println("gender: "+tmp_gender);
			                                 this.gender = tmp_gender;
			                                 
			                                 String tmp_age = st.nextToken();
			                                 System.out.println("age: "+tmp_age);
			                                 this.age = tmp_age;
			                                   System.out.println();
			                                   
			                                  
			                               }
			                               else
			                                   break;
			                       }
			                    
			                    recordfile.close();
			                } 
			                    catch (NumberFormatException e) {
			                    // TODO Auto-generated catch block
			                    e.printStackTrace();
			                } 
			                catch (IOException e) {
			                    // TODO Auto-generated catch block
			                    e.printStackTrace();
			                }
			                
			                
			                }
			                                        
			                catch (FileNotFoundException e) {
			                // TODO Auto-generated catch block
			                e.printStackTrace();
			            }
			 }

			        int binarySearch(dem2 s[], int l, int r, String place) {
			    	
			    	int mid;
			    	while (l<=r) {
			            
			    		mid = (l+r)/2;
			    		if(s[mid].getseckey().compareTo(place)==0) {return mid;}
			    		if(s[mid].getseckey().compareTo(place)<0) l = mid + 1;
			    		if(s[mid].getseckey().compareTo(place)>0) r = mid - 1;
			    	}
			    	return -1;
			    }

			  public  void indexing() 
			  {
			         try{
			        RandomAccessFile hey=new RandomAccessFile("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
			  
			    			

			        RandomAccessFile indexfile=new RandomAccessFile("C:\\Users\\Moulya\\Desktop\\in1.txt","rw");
			        String line;
			 long       pos=hey.getFilePointer();
			        while((line = hey.readLine())!=null)
			        {
			            if(line.contains("*")) {
				                		continue;
				                	}

			            String[] columns=line.split(",");
			                                 

			                        

			         
			            indexfile.writeBytes(columns[1]+","+pos+"\n");
			            pos=hey.getFilePointer();
			        } indexfile.close();
			        hey.close();
			                
			        
			         
			       
			         }
			    
			    catch(IOException e)
			    {
			        System.out.println(e);
			    }
			  }

			 public   void delete() throws IOException {
				 indexing();
			     
			     System.out.println("Enter the place to delete: ");
			     Scanner scanner = new Scanner(System.in);
			     String place = scanner.next();
			     String ans = "n";
			     int pos;
			     int oripos = binarySearch(sI, 0, reccount-1, place);
			     System.out.println("WAIT FOR FEW SECONDS....: ");
			     if (oripos == -1) {
			         System.out.println("Record not found in the record file");
			         return ;
			     }
			     
			     pos = oripos;
			     
			     do {
			         readFile(pos);
			         
			         System.out.println("Do You Want To delete This Record ?(y/n) ");
			         ans = scanner.next();
			         
			         if (ans.compareTo("y")==0) {
			             markDelete(pos, place);
			         }
			         pos--;
			         if (pos < 0) { break;}
			     }while(sI[pos].getseckey().compareTo(place)==0);
			         
			     
			     pos = oripos + 1 ;
			     
			     
			     while(sI[pos].getseckey().compareTo(place)==0 && pos > reccount-1){
			         readFile(pos);
			         
			         System.out.println("Do You Want To delete This Record ?(y/n) ");
			         ans = scanner.next();
			         
			         if (ans.compareTo("y")==0) {
			             markDelete(pos, place);
			             break;
			         }
			         pos++;
			         if (pos > reccount-1) { break;}
			     }
			}
			 public void markDelete(int pos, String place) {
			     try {
			         RandomAccessFile recordfilee = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\r.txt","rw");
			         RandomAccessFile indexfilee = new RandomAccessFile ("C:\\Users\\Moulya\\Desktop\\in1.txt","rw");
			     
			             recordfilee.seek(Long.parseLong(sI[pos].getRecPos()));
			             recordfilee.writeBytes("*");
			             System.out.println("Done");
			             recordfilee.close();
			             String line;
			             String indexName;
			             long indexPos = 0;
			             long delPosi;
			             //delPosi = indexfilee.getFilePointer();
			             while((line = indexfilee.readLine())!=null) {
			                 if(line.contains("*"))
			                     continue;
			                 StringTokenizer st = new StringTokenizer(line,",");
			                delPosi = indexfilee.getFilePointer();
			                 delPosi = delPosi - (line.length()+2);
			                 
			                 //System.out.println("Delposi: " + delPosi);
			                 
			                 while(st.hasMoreTokens()) {
			                     indexName=st.nextToken();
			                     indexPos= Long.parseLong(st.nextToken());
			                     //System.out.println("indexPos: " + indexPos);
			                     //System.out.println("getrecpos: " + Long.parseLong(sI[pos].getRecPos()));
			                     if(indexName.equals(place) && indexPos == Long.parseLong(sI[pos].getRecPos()) ) {
			                         indexfilee.seek(delPosi);
			                         indexfilee.writeBytes("*");
			                         indexfilee.close();
			                         System.out.println("Deleted");
			                         indexing();
			                         return;
			                     }
			                 }
			             }
			             }
			         
			         catch (Exception e) {
			             e.printStackTrace();
			         }
			 }

			}

